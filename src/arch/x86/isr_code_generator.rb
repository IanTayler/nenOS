#!/usr/bin/ruby
IN_FILE     = "boot.s.pre"
OUT_FILE    = "boot.s"
PREFIX      = "src/arch/x86/"
TAB         = "    "
DEBUG       = true



class IsrCodeGenerator
    def initialize(in_file, out_file)
        @in_file    = in_file
        @out_file   = out_file
        @safe_to_w  = false
        self.read_in()
        self.write_out()
    end

    def read_in
        if File.exist? (@in_file) then
            File.open(@in_file, 'r') do |inf|
                @text = inf.read()
                @safe_to_w = true
            end
        end
    end

    def write_out
        if @safe_to_w then
            File.open(@out_file, 'w+') do |outf|
                outf.puts(@text.gsub("\#\<ISR\>", self.auto_gen))
                outf.puts("\#\/*Auto-generated by isr_code_generator.rb*\/")
                @safe_to_w = false
            end
        end
    end

    def auto_gen
        retv = ""
        # First define isrX for X in [0..31]
        (0..31).each do |i|
            retv << ".global isr#{i}\n"
        end

        # Now fill in each function call.
        (0..31).each do |i|
            retv << "isr#{i}:\n"
            retv << "#{TAB}cli\n"
            unless [8, 10, 11, 12, 13, 14].include?(i)
                retv << "#{TAB}push $0\n"
            end
            retv << "#{TAB}push $#{i}\n"
            retv << "#{TAB}jmp isr_common_stub\n"
        end

        retv << ".extern fault_handler\n"
        retv << "isr_common_stub:\n"
        retv << "#{TAB}pusha\n"

        regists = ['d', 'e', 'f', 'g']

        regists.each do |r|
            retv << "#{TAB}pushw %#{r}s\n"
        end
        retv << "#{TAB}movw $0x10, %ax\n"

        regists.each do |r|
            retv << "#{TAB}movw %ax, %#{r}s\n"
        end

        retv << "#{TAB}movl %esp, %eax\n"
        retv << "#{TAB}pushl %eax\n"
        if DEBUG then
            retv << "not_that_bad:\n"
        end
        retv << "#{TAB}movl $fault_handler, %eax\n"
        retv << "#{TAB}call *%eax\n"
        if DEBUG then
            retv << "might_be_here:\n"
        end
        retv << "#{TAB}popl %eax\n"

        regists.reverse.each do |r|
            retv << "#{TAB}popw %#{r}s\n"
        end

        retv << "#{TAB}popa\n"
        retv << "#{TAB}addl 8, %esp\n"
        retv << "#{TAB}iret\n"
        return retv
    end
end

doit = IsrCodeGenerator.new(PREFIX + IN_FILE, PREFIX + OUT_FILE)
